<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/01/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议概述]]></title>
      <url>http://yoursite.com/2017/01/24/http/</url>
      <content type="html"><![CDATA[<p>#1.HTTP流</p>
<ol>
<li>打开一个TCP连接</li>
<li>发送一个http报文</li>
<li>读取服务端返回的报文</li>
<li>关闭连接或者为以后的请求重用连接</li>
</ol>
<p>当HTTP流水线启动时，请求都可以不用等待第一个请求的成功回应就被发送。然而HTTP流水线已经被证明很难在现有的网络中实现，因为现有的网络中有很多老旧的软件与现代版本的软件共存。因此HTTP流水线已经被在有多请求下表现得更稳健的HTTP/2的帧所取代。</p>
<p>#2.HTTP能控制什么</p>
<ul>
<li>缓存，由服务端告诉客户端需要缓存的时间，如cookie的失效时间</li>
<li>开放同源限制，就是可以跨域共享信息，传统的跨域方式使用jsonp(jsonp的原理就是利用&lt;script&gt;标签没有同源限制的漏洞),现在兴起的方式是CROS(CROS对于浏览器有限制，有的文章说IE10以下不能使用，有的文章说IE8,IE9也能使用)</li>
<li>认证，一些页面被保护起来，需要通过认证之后才能访问，可以用cookie的方式来实现。但是主流的方式还是在服务端进行实现</li>
<li>会话，用一个服务器状态连接起了每一个请求</li>
</ul>
<p>#3.HTTP请求实例<br><img src="./HTTP_Request.png" alt="Alt text"></p>
<hr>
<p>请求由下面的元素组成：</p>
<ul>
<li>一个HTTP的method，经常是由一个动词像GET,POST或者一个名词像OPTIONS，HEAD来定义客户端的动作行为的，通常客户端的操作都是获取资源</li>
<li>要获取的资源路径</li>
<li>HTTP协议版本号</li>
<li>为服务端表达其他信息的可选择性headers</li>
<li>对于一些像POST这样的方法，报文的body就包含了发送的资源，这个body与回应报文的body类似</li>
</ul>
<p>#4.HTTP响应</p>
<p><img src="./HTTP_Response.png" alt="Alt text"></p>
<hr>
<p>响应包含的内容：</p>
<ul>
<li>HTTP的版本号</li>
<li>一个状态码(status code)，告诉对应的请求发送成功还是失败，HTTP状态码可参考<a href="http://www.cnblogs.com/lxinxuan/archive/2009/10/22/1588053.html" target="_blank" rel="external">这篇博文</a></li>
<li>一个状态信息,这个状态信息是非权威的状态码描述，也就是说可以由服务端自行设计</li>
<li>HTTP headers，与请求的很像</li>
<li>可选的，但是比在请求报文中更加常见地包含获取资源的body</li>
</ul>
<p>#5.总结</p>
<p>HTTP是很简单可扩展的一种协议。结合了轻松添加头部信息的能力的Client-Server结构使得HTTP可以和web的功能扩充一同发展 </p>
]]></content>
    </entry>
    
  
  
</search>
